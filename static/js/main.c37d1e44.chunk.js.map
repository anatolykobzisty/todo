{"version":3,"sources":["features/todoList/todoListSlice.tsx","app/store.ts","app/hooks.ts","features/todoForm/index.tsx","features/todoItem/index.tsx","features/todoList/index.tsx","App.tsx","index.tsx"],"names":["todoListSlice","createSlice","name","initialState","todoList","reducers","addTodo","state","action","todo","id","nanoid","text","payload","completed","push","updateTodo","updatedTodo","find","deleteTodo","filter","toggleCompleteTodo","toggledTodo","actions","store","configureStore","reducer","todoListReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoForm","Form","useForm","form","inputRef","React","useRef","dispatch","className","onFinish","values","resetFields","current","focus","cursor","Item","type","ref","placeholder","htmlType","Text","Typography","TodoItem","useState","editable","setEditable","setText","onChange","value","e","target","delete","onClick","TodoList","locale","emptyText","dataSource","renderItem","Content","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c37d1e44.chunk.js","sourcesContent":["import { createSlice, nanoid, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface Todo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\ninterface TodoListState {\n  todoList: Todo[];\n}\n\nconst initialState: TodoListState = {\n  todoList: [],\n};\n\nconst todoListSlice = createSlice({\n  name: \"todoList\",\n  initialState,\n  reducers: {\n    addTodo(state, action: PayloadAction<{ text: string }>) {\n      const todo = {\n        id: nanoid(),\n        text: action.payload.text,\n        completed: false,\n      };\n      state.todoList.push(todo);\n    },\n    updateTodo(state, action: PayloadAction<Todo>) {\n      const updatedTodo = state.todoList.find((todo) => todo.id === action.payload.id);\n      if (updatedTodo) {\n        updatedTodo.text = action.payload.text;\n      }\n    },\n    deleteTodo(state, action: PayloadAction<{ id: string }>) {\n      state.todoList = state.todoList.filter((todo) => todo.id !== action.payload.id);\n    },\n    toggleCompleteTodo(state, action: PayloadAction<{ id: string }>) {\n      const toggledTodo = state.todoList.find((todo) => todo.id === action.payload.id);\n      if (toggledTodo) {\n        toggledTodo.completed = !toggledTodo.completed;\n      }\n    },\n  },\n});\n\nexport const { addTodo, updateTodo, deleteTodo, toggleCompleteTodo } = todoListSlice.actions;\nexport default todoListSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport todoListReducer from \"../features/todoList/todoListSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    todoList: todoListReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport { Form, Button, Input } from \"antd\";\nimport { addTodo } from \"../todoList/todoListSlice\";\n\nimport { useAppDispatch } from \"../../app/hooks\";\n\nexport const TodoForm = () => {\n  const [form] = Form.useForm();\n  const inputRef = React.useRef<any>(null);\n\n  const dispatch = useAppDispatch();\n\n  const onFinish = (values: { text: string }) => {\n    dispatch(addTodo({ text: values.text }));\n    form.resetFields();\n    inputRef.current!.focus({\n      cursor: \"start\",\n    });\n  };\n\n  return (\n    <Form className=\"todo-input-box\" form={form} onFinish={onFinish}>\n      <Form.Item name={\"text\"}>\n        <Input type=\"text\" ref={inputRef} placeholder=\"напишите задачу\" />\n      </Form.Item>\n      <Button type=\"primary\" htmlType=\"submit\">\n        добавить задачу\n      </Button>\n    </Form>\n  );\n};\n","import { useState } from \"react\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { deleteTodo, updateTodo, toggleCompleteTodo } from \"../todoList/todoListSlice\";\nimport { Todo } from \"../todoList/todoListSlice\";\nimport { Checkbox, Input, Button, Typography } from \"antd\";\n\nconst { Text } = Typography;\n\nexport function TodoItem(todo: Todo) {\n  const [editable, setEditable] = useState(false);\n  const [text, setText] = useState(todo.text);\n\n  const dispatch = useAppDispatch();\n\n  const handleOnChange = () => {\n    dispatch(toggleCompleteTodo({ id: todo.id }));\n  };\n\n  return (\n    <div className=\"todo-item\">\n      <div className=\"todo-item-left\">\n        <Checkbox onChange={handleOnChange} />\n        {editable ? (\n          <Input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n        ) : (\n          <Text delete={todo.completed}>{todo.text}</Text>\n        )}\n      </div>\n      <div className=\"todo-item-right\">\n        <Button\n          className=\"btn-edit-update\"\n          type=\"primary\"\n          onClick={() => {\n            dispatch(\n              updateTodo({\n                ...todo,\n                text: text,\n              })\n            );\n            if (editable) {\n              setText(text);\n            }\n            setEditable(!editable);\n          }}\n        >\n          {editable ? \"обновить\" : \"редактировать\"}\n        </Button>\n        <Button type=\"primary\" onClick={() => dispatch(deleteTodo({ id: todo.id }))}>\n          удалить\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { useAppSelector } from \"../../app/hooks\";\nimport { TodoItem } from \"../todoItem\";\n\nimport { List } from \"antd\";\n\nexport const TodoList = () => {\n  const todoList = useAppSelector((state) => state.todoList.todoList);\n\n  return (\n    <List\n      className=\"todo-list-box\"\n      locale={{\n        emptyText: \"Делать нечего :(\",\n      }}\n      dataSource={todoList}\n      renderItem={(todo) => <TodoItem key={todo.id} {...todo} />}\n    />\n  );\n};\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport \"./App.less\";\nimport { TodoForm } from \"./features/todoForm\";\nimport { TodoList } from \"./features/todoList\";\n\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <Layout className=\"container\">\n      <Content>\n        <TodoForm />\n        <TodoList />\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport { store } from \"./app/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}